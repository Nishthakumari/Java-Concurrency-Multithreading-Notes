Synchronisation:
Threads share the same memory i.e they can share resources(objects)
However, there are critical situations when it  is desirable that only one thread at a time has acccess 
to a shared resouce.

Like Movie Ticket Booking, There is a field called RemainingSeat. MultipleThread are taking care of 
multiple user to book seats in that cinema hall.

If remainingSeat>0, book the seat and decreament the remaining seat by 1.

Lets say remaining thread is 1 and 3 threads are trying to access this variable.

Lets say 1st thread saw that reamining seat is 1 , so it went to book the seat which takes some time due to 
some involvemnet of database call. In the mean time, 2nd thread also say that remaining seat is also 1 , thus
it also went for booking. Thus available seat were 1, but two booking happened.

Race condition.

The shared resource in this case is "RemainingSeat" variable.


Simulate a race condition using stack.

Create  a stack having capacity 5.

Create a thread which push 100 in stack 10 times.
Create another thread which pop from stack 10 times.

So there are two thread which are running parallely , one is trying to push 100. 10 times and other 
is trying to pop 10 times from the same stack.

We dont know exact sequence order in which these thread will run.

When we try to run this program, we run into "ArrayIndexOutOfBoundException"

Case: While pushing into the stack, we do stacktop++, so stack got increased, but then this thread went to sleep
for a while, in the mean time other thread might have decreased staktop-- in pop method to make it negative, 
thus when it comeback to push again, while stroing element , index stacktop mayhave become negative.
So, stack[stackTop] =element will give error.

So there might arise some cases when we cannot allow multiple thread to acess method at same time.

In collection, we have some thread safe classes which exactly does the same thing.


Push annd Pop are two method which are changing the state of the current object.
isFull and isEmpty is not changing the state.

We cant allow multiple thread to change the state at the same time. Becuse that will cause inconsistency.

What can we do??

We can provide a lock to the method, which allows only one thread to access that method, and untill it 
completes its execution, other thread cannot enter that method/block.

We can use lock or synchronised keyword.

Here we will use syncronised keyword.

synchroised{

}

Now, this synchronised keyword takes  a lock on th basis of which it aloows thread to eneter.

This lock can be any object, except primitive types.

Like ...    new Object(), new String("ss") .. Any object can act as lock here.


Now, suppose there there three thread t1, t2, and t3 which are waiting for push method lock.

And three thread t1(same), t4 and t5 , waiting for pop method lock.

Suppose t2 took the lock and enter push method. 

Now other thread who are even waiting for pop, cannot enter pop method which the lock is taken by t2 
thread waiting which is in push method.. 

So even if two methods are totally independent of each other, but share same lock. Then if a thread took
that lock and is in one of the method. Other thread cannot enter any reamining methods.

Lets say we use two different lock for push and pop, then one thread maybe t2 enters push with lock1. and
other thread lets say t1 enters pop method with lock2.

Does it solve our issue of stack???

So do we want two different lock or a single lock for the Stack class???

Having two different lock means two different thread can enters in push and pop respectively.
but it also means that two thread are changing the state of class  at the same time, which 
we dont want.


We just want same lock in push and pop method for our stack problem.

---> We can also make the whole method synchronised by adding keyword "synchronised" in the method signature 
itself.

And we dont need to pass any lock if adding synchroised keywordin method itself.  But we need to pass lock 
when we are using syncrnised for a block.

But the ques is ??

What lock does it uses??

Behind the scene , it uses the instance of current object as the lock, and put the whole code of method 
in syncronised  block with this keyword as a lock.


synchroised(this)
{
    //whole method body
}

for all the synchroised method in the class, the lock is the instance of this current class. Only one thread
will be able to acccess all the synchroised methods. Becuse we used same lock "this" keyword in all methods.












Runnable is a functional interface. Because it has one astract method i.e. run().
If there is any class which implements Runnable, It has to implement run() method.

Now How to create thread here???

Thread Class has a contructor which takes object of Runnable class. So we will pass the object of runnable 
class and give a name. Giving name is optional.


Thread2 implements Runnable{
    run(){
        for( i=0.. 5)
        {
            sysout(Thread.currentThread() " ," +i)
        }
    }
}

Thread thread2 = new Thread(new Thread2(), "thread2");

You cannot start same thread twice. It will give IllegalThread Exception 


class Thread implements Runnable{

}

This thread class also implements Runnable, then why is it asking to pass runnable object to it.

Thread class has a Runnable object and run method. In run method, it calls run method of Runnable Object if 
thats not null.

When we create thread using Thread Class, then we ovveride the run method of thread. Here no runnable 
instance is created and run method of Runnable instance is not called.


When we create thread by implementing Runnable interface . We pass runnable interface oject and thread class,
Thread CLass run is called which in ture calls , the run method of runnable interface.

Which one should be used? Extending a Thread Class or implementing a Runnable Interface.

Extending the Thread Class gives us some constraint that we cannot extend multiple classes.

But implementing the Runnable class, does not prevent it from implementing multiple Interfaces.


So we create thread by implementing Runable Interface.


Use lambda function to reduce code, basically implementation of run() function is given as paramater, 
basically we pass function as a paramter in lamda function.

Thread thread2 = new Thread( ()->
{
    for(int i=0 ... 5)
    {
            sysout(Thread.currentThread() + i)
    }
}, "thread2"

)

Start() is an asynchronous function, so call return immideitly.

After some time, run() method is executed.


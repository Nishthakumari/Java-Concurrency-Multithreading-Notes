When a standalone application is run, a user thread is automatically created to execute the main()
method of the application. This thread is called the main thread.

If no other user threads are spawned, the program terminates when the main() method finishes executing.

All other threads called child threads, are spawned from the main thread. 

The main method can then finish, but the program will keep running untill all user threads have completed.


User Thread and Daemon thread:

1. Main Thread is also user thread. If all user thread stops running, then program will terminates 
irrespective of wheather daemon thread are running or not.

2. Suppose we have four thread. Main thread, 2 user threads and 1 daemon thread. If Main thread stops and 
2 users threads and demon thread are still running, program will not stop. But if Main thread and 2 user 
thread stops running, and daemon thread is still running, In this case, Program will stop even if daemon 
tthread is running.


* Calling the setDaemon(boolean) method in the thread class marks the status of the thread as either 
daemon or user, but this must be done before the thread has started.

* As long as a user thread is alive, the JVM does not terminate.

* A daemon thread is at the mercy of the runtime system: it is stopped if there are no more user threads 
running, thus terminating the program.



